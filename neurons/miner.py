# The MIT License (MIT)
# Copyright © 2023 Yuma Rao
# Copyright © 2024 Bitrecs

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the “Software”), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of
# the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
# THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.



import sys
import time
import typing
import asyncio
import json
import json_repair
import hashlib
from dotenv import load_dotenv
load_dotenv()
import bittensor as bt
import bitrecs.utils.constants as CONST
from typing import List
from datetime import datetime, timedelta, timezone
from bitrecs.base.miner import BaseMinerNeuron
from bitrecs.commerce.user_profile import UserProfile
from bitrecs.commerce.product import ProductFactory
from bitrecs.protocol import BitrecsRequest
from bitrecs.llms.prompt_factory import PromptFactory
from bitrecs.llms.factory import LLM, LLMFactory
from bitrecs.utils.runtime import execute_periodically
from bitrecs.utils.uids import best_uid
from bitrecs.utils.version import LocalMetadata


async def do_work(user_prompt: str,
                  context: str, 
                  num_recs: int,
                  server: LLM,
                  model: str,
                  system_prompt="You are a helpful assistant.", 
                  profile : UserProfile = None,
                  debug_prompts=False) -> List[str]:
    """
    Miner work is done here.
    This function is invoked by the validator Forward function to generate product recommendations based on the user prompt and context.    

    This subnet is designed around LLM consensus.
    You are expected to call an LLM to generate the recommendations based on the user prompt and context.
    Please check the Bitrecs discord pinned messages for more information regarding your expection as a miner.
    Failing to do so could result in your miner being blacklisted and removed from the network.
    The default setup will use OPEN_ROUTER.

    Args:
        user_prompt (str): The user query (generally the SKU they are browsing)
        context (str): The context of the user query - this is set of products to chose from (store catalog)
        num_recs (int): The number of recommendations to generate.
        server (LLM): The LLM server type to query.
        model (str): The LLM model to use.
        system_prompt (str): The system prompt for the LLM.
        profile (UserProfile): The user profile to use when generating recommendations.
        debug_prompts (bool): Whether to log debug information about the prompts.

    Returns:
        typing.List[str]: A list of product recommendations generated by the miner.

    """
    bt.logging.info(f"do_work Prompt: {user_prompt}")
    bt.logging.info(f"do_work LLM server: {server}")
    bt.logging.info(f"do_work LLM model: {model}")  
    bt.logging.trace(f"do_work profile: {profile}")

    # Validate inputs
    if not user_prompt or len(user_prompt.strip()) < CONST.MIN_QUERY_LENGTH:
        bt.logging.error(f"Invalid user_prompt: {user_prompt}")
        return []
    
    if not context or len(context.strip()) < 10:
        bt.logging.error(f"Invalid context: {context}")
        return []
    
    if num_recs < 1 or num_recs > CONST.MAX_RECS_PER_REQUEST:
        bt.logging.error(f"Invalid num_recs: {num_recs}")
        return []

    try:
        factory = PromptFactory(sku=user_prompt,
                                context=context, 
                                num_recs=num_recs,                                                         
                                debug=debug_prompts,
                                profile=profile)
        prompt = factory.generate_prompt()
        
        # Add timeout protection for LLM calls
        llm_response = None
        try:
            llm_response = LLMFactory.query_llm(server=server, 
                                                model=model, 
                                                system_prompt=system_prompt, 
                                                temp=0.0, user_prompt=prompt)
        except Exception as llm_error:
            bt.logging.error(f"LLM call failed: {llm_error}")
            return []
        
        if not llm_response or len(llm_response.strip()) < 10:
            bt.logging.error("LLM response is empty or too short.")
            return []
        
        parsed_recs = PromptFactory.tryparse_llm(llm_response)
        if debug_prompts:
            bt.logging.trace(f"LLM raw response: {llm_response}")
            bt.logging.trace(f"Parsed recommendations: {parsed_recs}")

        # Validate parsed results before returning
        if not parsed_recs or len(parsed_recs) == 0:
            bt.logging.error("No valid recommendations parsed from LLM response")
            return []
        
        # Additional validation for parsed results
        valid_recs = []
        for rec in parsed_recs:
            if isinstance(rec, dict) and all(key in rec for key in ['sku', 'name', 'price', 'reason']):
                valid_recs.append(rec)
            else:
                bt.logging.warning(f"Invalid recommendation format: {rec}")
        
        if len(valid_recs) == 0:
            bt.logging.error("No valid recommendations after validation")
            return []
            
        return valid_recs
    except Exception as e:
        bt.logging.error(f"Error in do_work: {e}")
        return []


class Miner(BaseMinerNeuron):
    """
    Main miner class which generates product recommendations based on incoming requests.
    You are encouraged to modify the do_work function to generate high quality recommendations using whatever method you prefer.

    Default: By default this miner uses OPEN_ROUTER and google/gemini-2.0-flash-lite-001 to generate recommendations.
    
    You can override this by setting the --llm.provider argument in the config.
    For example, --llm.provider OLLAMA_LOCAL will use the local ollama instance to generate recommendations.
    Additionally, --llm.model "model_name" can be used to override the default model.

    Note: check your .env file for the appropriate API key settings and urls for the LLM provider configured.

    """

    def __init__(self, config=None):
        super(Miner, self).__init__(config=config)

        bt.logging.info(f"\033[1;32m 🐸 Bitrecs Miner started uid: {self.uid}\033[0m")

        try:
            self.llm = self.config.llm.provider
            provider = LLMFactory.try_parse_llm(self.llm)
            bt.logging.info(f"\033[1;35m Miner LLM Provider: [{self.llm}]\033[0m")
            self.llm_provider = provider
            self.model = ""
        except ValueError as ve:
            bt.logging.error(f"Invalid LLM provider: {ve}")
            sys.exit()      

        if self.llm_provider == LLM.VLLM:
            bt.logging.info(f"\033[1;35m Please ensure vLLM Server is running\033[0m")
        elif self.llm_provider == LLM.OLLAMA_LOCAL:
            bt.logging.info(f"\033[1;35m Please ensure Ollama Server is running\033[0m")
        else:
            bt.logging.info(f"\033[1;35m Please ensure your API keys are set in the environment\033[0m")             

        bt.logging.info(f"\033[1;35m Miner is warming up\033[0m")
        warmup_result = self.warmup()
        if not warmup_result:
            bt.logging.error(f"\033[31mMiner warmup failed. Exiting.\033[0m")
            sys.exit()
        if not self.model:
            bt.logging.error(f"\033[31mMiner model not set. Exiting.\033[0m")
            sys.exit()

        best_performing_uid = best_uid(self.metagraph)        
        if self.uid == best_performing_uid:
            bt.logging.info(f"\033[1;32m 🐸 You are the BEST performing miner in the subnet, keep it up!\033[0m")

        self.total_request_in_interval = 0
        
        if(self.config.logging.trace):
            bt.logging.trace(f"TRACE ENABLED Miner {self.uid} - {self.llm_provider} - {self.model}")
    

    async def forward(
        self, synapse: BitrecsRequest
    ) -> BitrecsRequest:
        """
        Takes an API request and generates recs

        Args:
            synapse (bitrecs.protocol.BitrecsRequest): The synapse object containing the 'BitrecsRequest' data.

        Returns:
            bitrecs.protocol.BitrecsRequest: The synapse object with the recs - same object modified with updated fields.

        """
        bt.logging.info(f"MINER {self.uid} FORWARD PASS {synapse.query}")

        results = []
        query = synapse.query
        context = synapse.context
        num_recs = synapse.num_results
        model = self.model
        server = self.llm_provider        
        st = time.time()
        debug_prompts = self.config.logging.trace
        user_profile = UserProfile.tryparse_profile(synapse.user)

        try:
            results = await do_work(user_prompt=query,
                                    context=context, 
                                    num_recs=num_recs, 
                                    server=server, 
                                    model=model, 
                                    profile=user_profile,
                                    debug_prompts=debug_prompts)            
            bt.logging.info(f"LLM {self.model} - Results: count ({len(results)})")
            
            # If no results, return early to avoid processing
            if not results or len(results) == 0:
                bt.logging.error("No results from do_work - returning empty response")
                return BitrecsRequest(
                    name=synapse.name,
                    axon=synapse.axon,
                    dendrite=synapse.dendrite,
                    created_at=datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S"),
                    user="",
                    num_results=0,
                    query=synapse.query,
                    context="[]",
                    site_key=synapse.site_key,
                    results=[],
                    models_used=[self.model],
                    miner_uid=str(self.uid),
                    miner_hotkey=self.wallet.hotkey.ss58_address,
                    miner_signature=""
                )
        except Exception as e:
            bt.logging.error(f"\033[31mFATAL ERROR calling do_work: {e!r} \033[0m")
            # Return empty response on fatal error
            return BitrecsRequest(
                name=synapse.name,
                axon=synapse.axon,
                dendrite=synapse.dendrite,
                created_at=datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S"),
                user="",
                num_results=0,
                query=synapse.query,
                context="[]",
                site_key=synapse.site_key,
                results=[],
                models_used=[self.model],
                miner_uid=str(self.uid),
                miner_hotkey=self.wallet.hotkey.ss58_address,
                miner_signature=""
            )
        finally:
            et = time.time()
            bt.logging.info(f"{self.model} Query - Elapsed Time: \033[1;32m {et-st} \033[0m")
      
        # Parse and validate the catalog to check SKU validity
        try:
            catalog_products = ProductFactory.try_parse_context_strict(context)
            valid_skus = {product.sku.lower() for product in catalog_products}
            bt.logging.info(f"Catalog contains {len(valid_skus)} valid SKUs")
        except Exception as e:
            bt.logging.error(f"Failed to parse catalog: {e}")
            valid_skus = set()

        # STEP 1: VALID JSON FORMAT - Ensure proper JSON array structure
        bt.logging.info(f"STEP 1: Validating JSON format for {len(results)} items")
        final_results = []
        seen_skus = set()
        query_sku_lower = query.lower().strip()
        
        for i, item in enumerate(results):
            try:
                # Handle both dict and string inputs with robust JSON validation
                if isinstance(item, dict):
                    dictionary_item = item.copy()
                    bt.logging.trace(f"Item {i}: Already a dict, validating structure")
                else:
                    item_str = str(item).strip()
                    bt.logging.trace(f"Item {i}: Parsing string: {item_str[:100]}...")
                    
                    # Try multiple JSON parsing strategies
                    dictionary_item = None
                    
                    # Strategy 1: Direct JSON parsing
                    try:
                        dictionary_item = json.loads(item_str)
                        bt.logging.trace(f"Item {i}: Direct JSON parsing successful")
                    except json.JSONDecodeError:
                        # Strategy 2: JSON repair
                        try:
                            repaired = json_repair.repair_json(item_str)
                            dictionary_item = json.loads(repaired)
                            bt.logging.trace(f"Item {i}: JSON repair successful")
                        except Exception as repair_error:
                            bt.logging.warning(f"Item {i}: JSON repair failed: {repair_error}")
                            
                            # Strategy 3: Extract JSON from text
                            try:
                                # Look for JSON array patterns
                                import re
                                json_pattern = r'\{[^{}]*"sku"[^{}]*\}'
                                matches = re.findall(json_pattern, item_str)
                                if matches:
                                    dictionary_item = json.loads(matches[0])
                                    bt.logging.trace(f"Item {i}: Pattern extraction successful")
                            except Exception as pattern_error:
                                bt.logging.error(f"Item {i}: All JSON parsing strategies failed: {pattern_error}")
                                continue
                    
                    if dictionary_item is None:
                        bt.logging.error(f"Item {i}: Could not parse as valid JSON: {item_str}")
                        continue
                
                # STEP 2: CORRECT NUMBER OF RECOMMENDATIONS - Validate structure first
                bt.logging.trace(f"Item {i}: Validating required fields")
                
                # Validate required fields exist and are not empty
                required_fields = ['sku', 'name', 'price', 'reason']
                missing_fields = []
                for field in required_fields:
                    if field not in dictionary_item or not dictionary_item[field]:
                        missing_fields.append(field)
                
                if missing_fields:
                    bt.logging.error(f"Item {i}: Missing or empty fields {missing_fields}: {dictionary_item}")
                    continue
                
                # STEP 3: UNIQUE PRODUCTS - Check for duplicates
                sku = str(dictionary_item["sku"]).strip()
                if not sku:
                    bt.logging.error(f"Item {i}: Empty SKU: {dictionary_item}")
                    continue
                
                if sku in seen_skus:
                    bt.logging.error(f"Item {i}: Duplicate SKU found: {sku}")
                    continue
                seen_skus.add(sku)
                
                # STEP 4: NO QUERY PRODUCT - Exclude viewed product
                if sku.lower() == query_sku_lower:
                    bt.logging.error(f"Item {i}: Cannot recommend query product itself: {sku}")
                    continue
                
                # STEP 5: VALID SKUs - Ensure all exist in catalog
                if valid_skus and sku.lower() not in valid_skus:
                    bt.logging.error(f"Item {i}: SKU not found in catalog: {sku}")
                    continue
                
                # Clean up the data using regex patterns
                dictionary_item["name"] = CONST.RE_PRODUCT_NAME.sub("", str(dictionary_item["name"])).strip()
                dictionary_item["reason"] = CONST.RE_REASON.sub("", str(dictionary_item["reason"])).strip()
                dictionary_item["price"] = str(dictionary_item["price"]).strip()
                dictionary_item["sku"] = sku
                
                # Ensure cleaned fields are not empty
                if not dictionary_item["name"] or not dictionary_item["reason"]:
                    bt.logging.error(f"Item {i}: Empty name or reason after cleaning: {dictionary_item}")
                    continue
                
                # Create properly formatted JSON with validation
                try:
                    recommendation = json.dumps(dictionary_item, separators=(',', ':'))
                    # Validate the JSON can be parsed back
                    json.loads(recommendation)
                    final_results.append(recommendation)
                    bt.logging.trace(f"Item {i}: Successfully added recommendation for SKU {sku}")
                except Exception as json_error:
                    bt.logging.error(f"Item {i}: Failed to create valid JSON: {json_error}")
                    continue
                
            except Exception as e:
                bt.logging.error(f"Item {i}: Failed to process: {item}, error: {e}")
                continue

        # STEP 6: FINAL VALIDATION - Ensure exact count match
        bt.logging.info(f"STEP 6: Final validation - Expected {num_recs}, got {len(final_results)}")
        
        if len(final_results) != num_recs:
            bt.logging.error(f"CRITICAL: Expected {num_recs} results, but got {len(final_results)}")
            
            # If we have too few results, try to generate more from remaining valid items
            if len(final_results) < num_recs and len(results) > len(final_results):
                bt.logging.info(f"Attempting to generate additional recommendations from remaining items")
                
                # Get remaining valid items that weren't used
                used_skus = {json.loads(item)["sku"] for item in final_results}
                remaining_items = []
                
                for item in results:
                    try:
                        if isinstance(item, dict):
                            item_dict = item
                        else:
                            item_dict = json.loads(str(item))
                        
                        sku = str(item_dict.get("sku", "")).strip()
                        if (sku and sku not in used_skus and 
                            sku.lower() != query_sku_lower and
                            (not valid_skus or sku.lower() in valid_skus)):
                            
                            # Clean and validate the item
                            if all(field in item_dict for field in ['sku', 'name', 'price', 'reason']):
                                item_dict["name"] = CONST.RE_PRODUCT_NAME.sub("", str(item_dict["name"])).strip()
                                item_dict["reason"] = CONST.RE_REASON.sub("", str(item_dict["reason"])).strip()
                                item_dict["price"] = str(item_dict["price"]).strip()
                                item_dict["sku"] = sku
                                
                                if item_dict["name"] and item_dict["reason"]:
                                    remaining_items.append(item_dict)
                                    used_skus.add(sku)
                                    
                                    if len(final_results) + len(remaining_items) >= num_recs:
                                        break
                    except Exception as e:
                        bt.logging.warning(f"Failed to process remaining item: {e}")
                        continue
                
                # Add remaining items to reach target count
                for item_dict in remaining_items[:num_recs - len(final_results)]:
                    try:
                        recommendation = json.dumps(item_dict, separators=(',', ':'))
                        final_results.append(recommendation)
                        bt.logging.info(f"Added fallback recommendation for SKU {item_dict['sku']}")
                    except Exception as e:
                        bt.logging.error(f"Failed to add fallback item: {e}")
            
            # Final check - if still not enough, return empty to avoid 0.0 reward
            if len(final_results) != num_recs:
                bt.logging.error(f"FINAL FAILURE: Could not generate {num_recs} valid recommendations")
                return BitrecsRequest(
                    name=synapse.name,
                    axon=synapse.axon,
                    dendrite=synapse.dendrite,
                    created_at=datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S"),
                    user="",
                    num_results=0,
                    query=synapse.query,
                    context="[]",
                    site_key=synapse.site_key,
                    results=[],
                    models_used=[self.model],
                    miner_uid=str(self.uid),
                    miner_hotkey=self.wallet.hotkey.ss58_address,
                    miner_signature=""
                )
        
        bt.logging.info(f"SUCCESS: Generated exactly {len(final_results)} valid recommendations")
      
        # Create the final response with proper validation
        utc_now = datetime.now(timezone.utc)
        created_at = utc_now.strftime("%Y-%m-%dT%H:%M:%S")
        
        # Ensure we have exactly the right number of results
        if len(final_results) != num_recs:
            bt.logging.error(f"FINAL VALIDATION FAILED: Expected {num_recs}, got {len(final_results)}")
            return BitrecsRequest(
                name=synapse.name,
                axon=synapse.axon,
                dendrite=synapse.dendrite,
                created_at=created_at,
                user="",
                num_results=0,
                query=synapse.query,
                context="[]",
                site_key=synapse.site_key,
                results=[],
                models_used=[self.model],
                miner_uid=str(self.uid),
                miner_hotkey=self.wallet.hotkey.ss58_address,
                miner_signature=""
            )
        
        output_synapse = BitrecsRequest(
            name=synapse.name,
            axon=synapse.axon,
            dendrite=synapse.dendrite,
            created_at=created_at,
            user="",
            num_results=num_recs,
            query=synapse.query,
            context="[]",
            site_key=synapse.site_key,
            results=final_results,
            models_used=[self.model],
            miner_uid=str(self.uid),
            miner_hotkey=self.wallet.hotkey.ss58_address,
            miner_signature=""
        )
        
        # Generate proper signature
        try:
            payload_hash = self.sign_response(output_synapse)
            signature = self.wallet.hotkey.sign(payload_hash)
            output_synapse.miner_signature = signature.hex()
            bt.logging.info(f"Generated signature for {len(final_results)} recommendations")
        except Exception as sig_error:
            bt.logging.error(f"Failed to generate signature: {sig_error}")
            return BitrecsRequest(
                name=synapse.name,
                axon=synapse.axon,
                dendrite=synapse.dendrite,
                created_at=created_at,
                user="",
                num_results=0,
                query=synapse.query,
                context="[]",
                site_key=synapse.site_key,
                results=[],
                models_used=[self.model],
                miner_uid=str(self.uid),
                miner_hotkey=self.wallet.hotkey.ss58_address,
                miner_signature=""
            )

        bt.logging.info(f"MINER {self.uid} FORWARD PASS SUCCESS -> {len(final_results)} valid recommendations")
        self.total_request_in_interval += 1
        return output_synapse
    

    def sign_response(self, output_synapse: BitrecsRequest) -> bytes:
        payload = {
            "name": output_synapse.name,
            "axon_hotkey": output_synapse.axon.hotkey,
            "dendrite_hotkey": output_synapse.dendrite.hotkey,
            "created_at": output_synapse.created_at,
            "num_results": output_synapse.num_results,
            "query": output_synapse.query,
            "site_key": output_synapse.site_key,
            "results": output_synapse.results,
            "models_used": output_synapse.models_used,
            "miner_uid": output_synapse.miner_uid,
            "miner_hotkey": output_synapse.miner_hotkey,
        }
        payload_str = json.dumps(payload, sort_keys=True)
        return hashlib.sha256(payload_str.encode("utf-8")).digest()


    async def blacklist(
        self, synapse: BitrecsRequest
    ) -> typing.Tuple[bool, str]:
        """
        Determines whether an incoming request should be blacklisted and thus ignored. Your implementation should
        define the logic for blacklisting requests based on your needs and desired security parameters.

        Blacklist runs before the synapse data has been deserialized (i.e. before synapse.data is available).
        The synapse is instead contracted via the headers of the request. It is important to blacklist
        requests before they are deserialized to avoid wasting resources on requests that will be ignored.

        Args:
            synapse (bitrecs.protocol.BitrecsRequest): A synapse object constructed from the headers of the incoming request.

        Returns:
            Tuple[bool, str]: A tuple containing a boolean indicating whether the synapse's hotkey is blacklisted,
                            and a string providing the reason for the decision.

        This function is a security measure to prevent resource wastage on undesired requests. It should be enhanced
        to include checks against the metagraph for entity registration, validator status, and sufficient stake
        before deserialization of synapse data to minimize processing overhead.

        Example blacklist logic:
        - Reject if the hotkey is not a registered entity within the metagraph.
        - Consider blacklisting entities that are not validators or have insufficient stake.

        In practice it would be wise to blacklist requests from entities that are not validators, or do not have
        enough stake. This can be checked via metagraph.S and metagraph.validator_permit. You can always attain
        the uid of the sender via a metagraph.hotkeys.index( synapse.dendrite.hotkey ) call.

        Otherwise, allow the request to be processed further.
        """

        if synapse.dendrite is None or synapse.dendrite.hotkey is None:
            bt.logging.warning(
                "Received a request without a dendrite or hotkey."
            )
            return True, "Missing dendrite or hotkey"

        # TODO(developer): Define how miners should blacklist requests.
        uid = self.metagraph.hotkeys.index(synapse.dendrite.hotkey)
        if (
            not self.config.blacklist.allow_non_registered
            and synapse.dendrite.hotkey not in self.metagraph.hotkeys
        ):
            # Ignore requests from un-registered entities.
            bt.logging.trace(
                f"Blacklisting un-registered hotkey {synapse.dendrite.hotkey}"
            )
            return True, "Unrecognized hotkey"

        if self.config.blacklist.force_validator_permit:
            # If the config is set to force validator permit, then we should only allow requests from validators.
            if not self.metagraph.validator_permit[uid]:
                bt.logging.warning(
                    f"Blacklisting a request from non-validator hotkey {synapse.dendrite.hotkey}"
                )
                return True, "Non-validator hotkey"

        bt.logging.trace(
            f"Not Blacklisting recognized hotkey {synapse.dendrite.hotkey}"
        )

        bt.logging.debug(
            f"GOOD hotkey {synapse.dendrite.hotkey}"
        )

        return False, "Hotkey recognized!"

    async def priority(self, synapse: BitrecsRequest) -> float:
        """
        The priority function determines the order in which requests are handled. More valuable or higher-priority
        requests are processed before others. You should design your own priority mechanism with care.

        This implementation assigns priority to incoming requests based on the calling entity's stake in the metagraph.

        Args:
            synapse (bitrecs.protocol.BitrecsRequest): The synapse object that contains metadata about the incoming request.

        Returns:
            float: A priority score derived from the stake of the calling entity.

        Miners may receive messages from multiple entities at once. This function determines which request should be
        processed first. Higher values indicate that the request should be processed first. Lower values indicate
        that the request should be processed later.

        Example priority logic:
        - A higher stake results in a higher priority value.
        """
        if synapse.dendrite is None or synapse.dendrite.hotkey is None:
            bt.logging.warning(
                "Received a request without a dendrite or hotkey."
            )
            return 0.0

        # TODO(developer): Define how miners should prioritize requests.
        caller_uid = self.metagraph.hotkeys.index(
            synapse.dendrite.hotkey
        )  # Get the caller index.
        priority = float(
            self.metagraph.S[caller_uid]
        )  # Return the stake as the priority.
        bt.logging.debug(
            f"Prioritizing {synapse.dendrite.hotkey} with value: {priority}"
        )
        return priority
    
    
    def save_state(self):
        pass


    def warmup(self):
        """
        On startup, try querying the LLM to ensure it is working and loaded into memory.    
        You can override the base model with --llm.model "model_name"

        """
        match self.llm_provider:
            case LLM.OLLAMA_LOCAL:
                model = "mistral-nemo"                
            case LLM.OPEN_ROUTER:
                model = "google/gemini-2.0-flash-lite-001"
            case LLM.CHAT_GPT:
                model = "gpt-3.5-turbo"
            case LLM.VLLM:
                model = "NousResearch/Meta-Llama-3-8B-Instruct"                
            case LLM.GEMINI:                                
                model = "gemini-2.0-flash-001"
            case LLM.GROK:
                model = "grok-beta"
            case LLM.CLAUDE:
                model = "anthropic/claude-3.5-haiku"
            case _:
                bt.logging.error("Unknown LLM server")
                raise ValueError("Unknown LLM server")
                
        #If user specified model override it here
        if self.config.llm.model and len(self.config.llm.model) > 2:
            model = self.config.llm.model
             
        bt.logging.info(f"Miner Warmup: {self.llm} - Model: {model}")
        try:
            result = LLMFactory.query_llm(server=self.llm_provider, 
                                 model=model, 
                                 system_prompt="You are a helpful assistant", 
                                 temp=0.0, user_prompt="Tell me a sarcastic joke")
            self.model = model
            bt.logging.info(f"Warmup SUCCESS: {self.model} - Result: {result}")
            return True
        except Exception as e:            
            bt.logging.warning(f"\033[33mMake sure you are calling an LLM, thats the whole point of this subnet...\033[0m")
            bt.logging.error(f"\033[31mFATAL ERROR calling warmup: {e!r} \033[0m")
        return False
    
    
    @execute_periodically(timedelta(seconds=CONST.VERSION_CHECK_INTERVAL))
    async def version_sync(self):
        bt.logging.trace(f"Version sync ran at {int(time.time())}")
        try:
            self.local_metadata = LocalMetadata.local_metadata()
            self.local_metadata.uid = self.uid
            self.local_metadata.hotkey = self.wallet.hotkey.ss58_address
            local_head = self.local_metadata.head
            remote_head = self.local_metadata.remote_head
            code_version = self.local_metadata.version
            bt.logging.info(f"Bitrecs Version:\033[32m {code_version}\033[0m")
            if local_head != remote_head:
                bt.logging.info(f"Head:\033[33m {local_head}\033[0m / Remote: \033[33m{remote_head}\033[0m")                
                bt.logging.warning(f"{self.neuron_type} version mismatch: Please update your code to the latest version.")
            else:
                 bt.logging.info(f"Head:\033[32m {local_head}\033[0m / Remote: \033[32m{remote_head}\033[0m")
        except Exception as e:
            bt.logging.error(f"Failed to get version with exception: {e}")
        return


        
async def main():
    with Miner() as miner:
        start_time = time.time()        
        while True:            
            version_sync_task = asyncio.create_task(miner.version_sync())
            await version_sync_task

            bt.logging.info(f"Miner {miner.uid} running, waiting for work ... {int(time.time())}")
            if time.time() - start_time > 300:
                bt.logging.info(
                    f"---Total request in last 5 minutes: {miner.total_request_in_interval}"
                )
                start_time = time.time()
                miner.total_request_in_interval = 0

            await asyncio.sleep(10)

if __name__ == "__main__":  
    asyncio.run(main())
